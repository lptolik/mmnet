bottom.right = score.em(legal.boards, bottom.right.val)
leftover.moves = top.val.moves(bottom.right)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
bottom.right.third = score.em(leftover.boards, bottom.right.third.val)
leftover.moves = top.val.moves(bottom.right.third)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
bottom.right.sec = score.em(leftover.boards, bottom.right.sec.val)
leftover.moves = top.val.moves(bottom.right.sec)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
tot.fourth.scores = score.em(leftover.boards, tot.sum.in.fourth)
leftover.moves = top.val.moves(tot.fourth.scores)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores = score.em(leftover.boards, prep.for.next)
leftover.moves = top.val.moves(prep.scores)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
tile.tots = score.em(leftover.boards, function(x){20 - count.tiles(x)})
leftover.moves = top.val.moves(tile.tots)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores.third = score.em(leftover.boards, prep.for.next.third)
leftover.moves = top.val.moves(prep.scores.third)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores.second = score.em(leftover.boards, prep.for.next.second)
leftover.moves = top.val.moves(prep.scores.second)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
rand.choice = leftover.moves[sample(1:length(leftover.boards),1)]
return(comb.move(rand.choice))
}
execute = function(){
temp = htmlParse(remDr$getPageSource()[[1]])
play.func(temp)
}
#### SECTION VI Playing the game ####
grand.play = function(){
remDr$navigate("http://gabrielecirulli.github.io/2048/")
temp2 = rep("Continue",2)
while(temp2[2] != "Game over!"){
temp = htmlParse(remDr$getPageSource()[[1]])
execute()
temp2 = xpathSApply(temp,"//p",xmlValue)
curr.score = as.numeric(strsplit(xpathSApply(temp,"//div[@class='score-container']",xmlValue),split = "\\+")[[1]][1])
}
return(curr.score)
}
# example:
grand.play()
setwd("D:/bitbucket/mmnet/R")
list.files
list.files()
resource = c(source = "KO", type = "ontology")
server.resource <- "http://api.metagenomics.anl.gov/1/annotation/similarity"
paste(paste0(c("?", "&"), paste(c("source", "type"), resource,
sep = "=")), collapse = "")
paste(c("source", "type"), resource,
sep = "=")
rep("&",4)
paste(paste0(c("?", rep("&", 4), paste(c("source", "type", "evalue","identity", "length"), resource,
sep = "=")), collapse = "")
evalue=5
idneity=60
length=15
paste(paste0(c("?", rep("&", 4), paste(c("source", "type", "evalue","identity",
"length"), c(resource,evalue,identity,length),
sep = "=")), collapse = "")
paste(paste0(c("?", rep("&", 4), paste(c("source", "type", "evalue","identity",
"length"), c(resource,evalue,identity,length)),
sep = "=")), collapse = "")
c("?", rep("&", 4)
paste(paste0(c("?", rep("&", 4)), paste(c("source", "type", "evalue","identity",
"length"), c(resource,evalue,identity,length),
sep = "=")), collapse = "")
identity=60
paste(paste0(c("?", rep("&", 4)), paste(c("source", "type", "evalue","identity",
"length"), c(resource,evalue,identity,length),
sep = "=")), collapse = "")
server.resource <- "http://api.metagenomics.anl.gov/1/annotation/similarity"
server.para <- paste(paste0(c("?", rep("&", 4)), paste(c("source", "type", "evalue","identity",
"length"), c(resource,evalue,identity,length),
sep = "=")), collapse = "")
url.str <- paste0(server.resource, "/", MetagenomeID, server.para)
MetagenomeID="mgm4440616.3"
server.resource <- "http://api.metagenomics.anl.gov/1/annotation/similarity"
server.para <- paste(paste0(c("?", rep("&", 4)), paste(c("source", "type", "evalue","identity",
"length"), c(resource,evalue,identity,length),
sep = "=")), collapse = "")
url.str <- paste0(server.resource, "/", MetagenomeID, server.para)
URL.STR
url.str
source("getMgrastAnnotation.R")
a=getMgrastAnnotation(MetagenomeID,evalue=10)
library(mmnet)
getMgrastAnnotation
a=getMgrastAnnotation(MetagenomeID,evalue=10)
getURL
library(RCurl)
a=getMgrastAnnotation(MetagenomeID,evalue=10)
a
class(a)
dim(a)
b=getMgrastAnnotation(MetagenomeID)
DIM(B)
dim(b)
install.packages(BIOM)
install.packages(biom)
install.packages("biom")
min_dense_file = system.file("extdata", "min_dense_otu_table.biom", package = "biom")
min_dense_file
x1 = read_biom(min_dense_file)
library(biom)
x1 = read_biom(min_dense_file)
x1
x1
class(x1)
biom_data(x1)
library(mmnet)
data(mgp10Anno)
class(mgp10Anno)
mgp
mgp10Anno
KOAbund <- lapply(mgp10Anno,estimateAbundance)
KOAbund
class(KOAbund)
library(Biobase)
listLen(KOAbund)
a=getURL("http://api.metagenomics.anl.gov/1/matrix/function?id=mgm4447943.3&id=mgm4447192.3&id=mgm4447102.3&id=mgm4447103.3&group_level=level3&source=Subsystems&result_type=abundance&identity=80&filter_level=phylum&filter=Firmicutes")
a
class(a)
MetagenomeID
a=getURL("http://api.metagenomics.anl.gov/1/profile/mgm4440616.3?source=KO&type=function")
a
class(a)
length(a)
read_biom
read_biom("http://api.metagenomics.anl.gov/1/profile/mgm4440616.3?source=KO&type=function")
a=read_biom("http://api.metagenomics.anl.gov/1/profile/mgm4440616.3?source=KO&type=function")
a
class(a)
biom
?biom
KOAbund
toJSON(KOAbund)
library(RJSONIO)
toJSON(KOAbund)
B=toJSON(KOAbund)
B
CLASS(B)
class(B)
read_biom(B)
A
a
observation_metadata(a)
biom_data(a0)
biom_data(a)
b=biom_data(a)
class(b)
rownames(b)
colnames(b)
b
rownames(b)
colnames(b)
a
b
b[,2]
min(b[,2])
max(b[,2])
aa=read_biom("http://api.metagenomics.anl.gov/1/matrix/function?id=mgm4440616.3&source=KO&type=function&result_type=abundance")
aa
a
b[,1]
biom_data(aa)
class(biom_data(aa))
a
b
rownames(b)
rownames(biom_data(aa))
biom_data(aa)
names(biom_data(aa))
b
which(names(biom_data(aa))=="K01895")
b[674,1]
b
rownames(b)[674]
which(names(biom_data(aa))=="K01895")
biom_data(aa)[674]
write_biom(aa,"mgm4440616.3.biom")
aa
biom_data(aa)
aa=read_biom("http://api.metagenomics.anl.gov/1/matrix/function?id=mgm4440616.3&mgm4440613.3&source=KO&type=function&result_type=abundance")
aa
biom_data(aa)
aa=read_biom("http://api.metagenomics.anl.gov/1/matrix/function?id=mgm4440616.3&id=mgm4440613.3&source=KO&type=function&result_type=abundance")
biom_data(aa)
class(biom_data(aa))
dim(biom_data(aa))
?constructSSN
as.matrix(biom_data(aa))
constructSSN(as.matrix(biom_data(aa)[,1])
)
KOAbund
KOAbund[1]
class(KOAbund)
KOAbund[1]
length(KOAbund[1])
constructSSN(KOAbund[1])
ssn <- lapply(KOAbund, constructSSN)
sssn
ssn
?stripSSN
strpSSN(KOAbund[[1]])
stripSSN(KOAbund[[1]])
stripSSN(biom_data(a))
biom_data(a)
stripSSN(biom_data(a)[,1])
class(aa)
is.biom(aa)
class(aa) = "biom"
class(aa) == "biom"
nrow(aa)
ncol(aa)
data(RefDbcache)
refnode <- V(RefDbcache$network)$name
subnodes = intersect(biom_data(aa))
subnodes = intersect(biom_data(aa),refnodes)
subnodes = intersect(biom_data(aa),refnode)
subnodes
subnodes = intersect(names(biom_data(aa),refnode)
subnodes = intersect(names(biom_data(aa),refnode))
subnodes = intersect(names(biom_data(aa)),refnode))
subnodes = intersect(names(biom_data(aa)),refnode)
subnodes
observation_metadata(aa)
observation_metadata(aa)
observation_metadata(aa)
a=observation_metadata(aa)
a
class(a)
length(a)
dim(a)
a[,1]
a[,2]
a[,3]
a[,4]
sample_metadata(aa)
matrix_element_type(aa)
biom_shape(aa)
show(aa)
observation_metadata(aa)
class(observation_metadata(aa))
dim(observation_metadata(aa))
names(observation_metadata(aa))
(observation_metadata(aa))[,1]
(observation_metadata(aa))[,2]
(observation_metadata(aa))[,3]
rownames(aa)
class(aa)
rownames(aa)
colnames(aa)
header(aa)
biom_data
showMethods("biom_data")
min_dense_file = system.file("extdata", "min_dense_otu_table.biom", package = "biom")
x1 = read_biom(min_dense_file)
x1
min_sparse_file = system.file("extdata", "min_sparse_otu_table.biom", package = "biom")
x2 = read_biom(min_sparse_file)
x2
biom_data(x1)
biom_data(x2)
as.matrix(biom_data(x2))
show(x2)
class(show(x2))
x2$matrix_type
aa
ncol(aa)
ncol(biom_data(aa))
?ifelse
?"="
?"=="
aa
names(aa)
rownames(aa)
rownames(biom_data(aa))
names(biom_data(aa))
abundance=(biom_data(aa))
abundance
abundance = ifelse(abundance$matrix_type == "sparse", as.matrix(biom_data(abundance)), biom_data(abundance))
abudance=aa
abundance = ifelse(abundance$matrix_type == "sparse", as.matrix(biom_data(abundance)), biom_data(abundance))
abundance
abundance=aa
abundance = ifelse(abundance$matrix_type == "sparse", as.matrix(biom_data(abundance)), biom_data(abundance))
abundance
aa
abundance=aa
abundance
abundance$matrix_type == "sparse"
as.matrix(biom_data(abundance))
biom_data(abundance)
?ifelse
if(abundance$matrix_type == "sparse"){
abundance = as.matrix(biom_data(abundance))
}else{
abundance = biom_data(abundance)
}
abundance
refnode
if (ncol(abundance == 1)){
subnodes <- intersect(names(abundance[abundance != 0]), refnode)
}else{
subnodes <- lapplay(abundance,function(x)intersect(names(x[x!=0]),refnode))
}
subnodes
abundance
rownames(abundance[1])
rownames(abundance[2])
rownames(abundance)
if (ncol(abundance == 1)){
subnodes <- intersect(names(abundance[abundance != 0]), refnode)
}else{
subnodes <- lapplay(abundance,function(x)intersect(rownames(abundance)[x!=0],refnode))
}
subnodes
abundance
ncol(abundance)
rownames(abundance)
abundance[1]
class(abundance)
?lapply
biom_read(aa)
biom_data(aa)
biom_data(aa)[1]
biom_data(aa)[2]
biom_data(aa)[3]
biom_data(aa)[4]
biom_data(aa)[5]
biom_data(aa)[6]
biom_data(aa)[7]
biom_data(aa)[8]
class(biom_data(aa))
?apply
subnodes <- applay(abundance, 2, function(x)intersect(rownames(abundance)[x!=0],refnode))
subnodes <- apply(abundance, 2, function(x)intersect(rownames(abundance)[x!=0],refnode))
subnodes
which(abudance[,1]>0)
which(abundance[,1]>0)
length(which(abundance[,1]>0))
length(which(abundance[,2]>0))
subnodes
abundance
dim(abundance)
which(abundance[,1]!=0)
length(which(abundance[,1]!=0))
intersect(which(abundance[,1]!=0,refnode)
intersect(which(abundance[,1]!=0),refnode)
refnode
intersect(abudance[,1][which(abundance[,1]!=0)],refnode)
intersect(abudance[,1][abundance[,1]!=0],refnode)
intersect(abundance[,1][abundance[,1]!=0],refnode)
abundance[,1]
abundance[,1][abundance[,1]!=0]
intersect(names(abundance[,1][abundance[,1]!=0]),refnode)
abundance
subnodes
g <- lapply(subnodes,function(x)induced.subgraph(RefDbcache$network, x))
g
subnodes=subnodes[[1]]
subnodes
g <- lapply(subnodes,function(x)induced.subgraph(RefDbcache$network, x))
g
class(subnodes)
subnodes <- intersect(names(abundance[abundance != 0]), refnode)
class(subnodes)
length(subnodes)
abundance
subnodes <- apply(abundance, 2, function(x)intersect(rownames(abundance)[x!=0],refnode))
subnodes
class(subnodes)
g
v(g)
V(g)
a
history
history()
aa=read_biom("http://api.metagenomics.anl.gov/1/matrix/function?id=mgm4440616.3&source=KO&type=function&result_type=abundance")
aa
abundance=aa
abundance
if (ncol(abundance != 1)){
stop("the ncol of biom file must be 1")
if(abundance$matrix_type == "sparse"){
abundance = as.matrix(biom_data(abundance))
}else{
abundance = biom_data(abundance)
}
if (ncol(abundance != 1))
stop("the ncol of biom file must be 1")
if(abundance$matrix_type == "sparse"){
abundance = as.matrix(biom_data(abundance))
}else{
abundance = biom_data(abundance)
}
if (ncol(abundance) != 1)
stop("the ncol of biom file must be 1")
if(abundance$matrix_type == "sparse"){
abundance = as.matrix(biom_data(abundance))
}else{
abundance = biom_data(abundance)
}
abundance=aa
if (ncol(abundance) != 1)
stop("the ncol of biom file must be 1")
if(abundance$matrix_type == "sparse"){
abundance = as.matrix(biom_data(abundance))
}else{
abundance = biom_data(abundance)
}
abundance
class(abundance)
names(abundance)
colnames(abundance)
rownames(abundance)[abundance != 0]
abundance
length(abundance)
subnodes <- intersect(rownames(abundance)[abundance != 0], refnode)
subnodes
identical(rownames(abundance)[abundance != 0],names(abundance[abundance != 0]))
identical(rownames(abundance)[abundance != 0],rownames(abundance[abundance != 0]))
abundance
rownames(abundance)[abundance != 0]
names(abundance[abundance != 0])
rownames(abundance[abundance != 0])
abundance[abundance != 0]
source("stripSSN.R")
source("stripSSN.R")
source("stripSSN.R")
source("stripSSN.R")
stripSSN(aa)
class(aa)
is.biom
is.inherits()
inherits
?inherits
inherits(aa,"biom")
source("stripSSN.R")
source("stripSSN.R")
stripSSN(aa)
!inherits(aa, "biom")
source("stripSSN.R")
stripSSN(aa)
!is.vector(aa)
source("stripSSN.R")
stripSSN(aa)
g=stripSSN(aa)
g
g$abundance
g
library(igraph)
?get.vertex.attribute
get.vertex.attribute(g,"abundance")
abundance=aa
(class(abundance) == "biom"){
if (ncol(abundance) != 1)
stop("the ncol of biom file must be 1")
if(abundance$matrix_type == "sparse"){
abundance = as.matrix(biom_data(abundance))
}else{
abundance = biom_data(abundance)
}
abundance
subnodes <- intersect(rownames(abundance)[abundance != 0], refnode)
subnodes
g <- induced.subgraph(RefDbcache$network, subnodes)
g
match.index <- match(V(g)$name, names(abundance))
match.index
match.index <- match(V(g)$name, rownames(abundance))
match.index
subabund <- abundance[match.index]
subabund
source("stripSSN.R")
g=stripSSN(aa)
g
get.vertex.attribute(g,"abundance")
?rep
?rep
library(biom)
.libPaths()
package.version(mmnet)
package.version("mmnet")
??package
?install.packages
remove.packages("mmnet")
library(mmnet)
remove.packages("mmnet")
library(mmnet)
getMgrastAnnotation
help(package="mmnet")
